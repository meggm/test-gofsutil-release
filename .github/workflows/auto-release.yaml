name: Release GoFSUtil

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version of the repository (major.minor.patch), e.g., 1.0.0'
        required: true

  repository_dispatch:
    types: [auto-release-workflow]

jobs:
  compute-next-version:
    runs-on: ubuntu-latest

    outputs:
      next_version: ${{ steps.set_output.outputs.next_version }}

    steps:
      - name: Extract Current Version
        id: extract_version
        run: |
          # Get current version based on the trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CURRENT_VERSION="${{ github.event.inputs.current_version }}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            CURRENT_VERSION="${{ github.event.client_payload.current_version }}"
          fi

          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $CURRENT_VERSION"
            exit 1
          fi
          echo "Current version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Increment Major Version
        id: increment_major
        run: |
          CURRENT_VERSION="${{ env.CURRENT_VERSION }}"
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          NEXT_MAJOR_VERSION=$((VERSION_PARTS[0] + 1))
          NEXT_VERSION="${NEXT_MAJOR_VERSION}.0.0"
          echo "Next major version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Set Next Version Output
        id: set_output
        run: echo "::set-output name=next_version::${{ env.NEXT_VERSION }}"

  release-workflow:
    needs: compute-next-version
    uses: dell/common-github-actions/.github/workflows/csm-release-libs.yaml@main
    with:
      version: ${{ needs.compute-next-version.outputs.next_version }}
